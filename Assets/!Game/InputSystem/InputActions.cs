//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/!Game/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Touchs"",
            ""id"": ""19b16a7a-8517-4a31-aa93-93059f6c6a56"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Value"",
                    ""id"": ""5f8e0bd4-3a69-4c28-8546-13303e9a6338"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zero"",
                    ""type"": ""Value"",
                    ""id"": ""cbd30725-0928-42a0-8a9e-931e515debda"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e3327b0-53bd-4b49-a686-46021d239fd7"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44527d55-0c21-4ebd-9e52-02010a2c3c62"",
                    ""path"": ""<Touchscreen>/touch0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zero"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Positions"",
            ""id"": ""af8d75da-d895-4bbb-9e80-e24a5c4e411e"",
            ""actions"": [
                {
                    ""name"": ""PointerTouch"",
                    ""type"": ""Value"",
                    ""id"": ""de5e6b73-46ac-428c-80b6-ee5d55980ef1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerMouse"",
                    ""type"": ""Value"",
                    ""id"": ""36dc18c3-1c6d-4fb1-bff1-7d272534ea0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b404ed75-d7e8-4fcd-9e16-b874a1ae9399"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""def7453e-5135-45a0-869e-7fd2208c0e27"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buttons"",
            ""id"": ""7995cdc6-30b7-404b-b0a5-67b1d4ab27bc"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""dda8db23-734b-4548-bdb6-03b6e07c3eca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30c9926e-2e32-4f4c-b64e-e9210b4cccd4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69360177-e502-4469-987e-f5e47d09d894"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touchs
        m_Touchs = asset.FindActionMap("Touchs", throwIfNotFound: true);
        m_Touchs_Primary = m_Touchs.FindAction("Primary", throwIfNotFound: true);
        m_Touchs_Zero = m_Touchs.FindAction("Zero", throwIfNotFound: true);
        // Positions
        m_Positions = asset.FindActionMap("Positions", throwIfNotFound: true);
        m_Positions_PointerTouch = m_Positions.FindAction("PointerTouch", throwIfNotFound: true);
        m_Positions_PointerMouse = m_Positions.FindAction("PointerMouse", throwIfNotFound: true);
        // Buttons
        m_Buttons = asset.FindActionMap("Buttons", throwIfNotFound: true);
        m_Buttons_Drag = m_Buttons.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touchs
    private readonly InputActionMap m_Touchs;
    private List<ITouchsActions> m_TouchsActionsCallbackInterfaces = new List<ITouchsActions>();
    private readonly InputAction m_Touchs_Primary;
    private readonly InputAction m_Touchs_Zero;
    public struct TouchsActions
    {
        private @InputActions m_Wrapper;
        public TouchsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary => m_Wrapper.m_Touchs_Primary;
        public InputAction @Zero => m_Wrapper.m_Touchs_Zero;
        public InputActionMap Get() { return m_Wrapper.m_Touchs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchsActions set) { return set.Get(); }
        public void AddCallbacks(ITouchsActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchsActionsCallbackInterfaces.Add(instance);
            @Primary.started += instance.OnPrimary;
            @Primary.performed += instance.OnPrimary;
            @Primary.canceled += instance.OnPrimary;
            @Zero.started += instance.OnZero;
            @Zero.performed += instance.OnZero;
            @Zero.canceled += instance.OnZero;
        }

        private void UnregisterCallbacks(ITouchsActions instance)
        {
            @Primary.started -= instance.OnPrimary;
            @Primary.performed -= instance.OnPrimary;
            @Primary.canceled -= instance.OnPrimary;
            @Zero.started -= instance.OnZero;
            @Zero.performed -= instance.OnZero;
            @Zero.canceled -= instance.OnZero;
        }

        public void RemoveCallbacks(ITouchsActions instance)
        {
            if (m_Wrapper.m_TouchsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchsActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchsActions @Touchs => new TouchsActions(this);

    // Positions
    private readonly InputActionMap m_Positions;
    private List<IPositionsActions> m_PositionsActionsCallbackInterfaces = new List<IPositionsActions>();
    private readonly InputAction m_Positions_PointerTouch;
    private readonly InputAction m_Positions_PointerMouse;
    public struct PositionsActions
    {
        private @InputActions m_Wrapper;
        public PositionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerTouch => m_Wrapper.m_Positions_PointerTouch;
        public InputAction @PointerMouse => m_Wrapper.m_Positions_PointerMouse;
        public InputActionMap Get() { return m_Wrapper.m_Positions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PositionsActions set) { return set.Get(); }
        public void AddCallbacks(IPositionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PositionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PositionsActionsCallbackInterfaces.Add(instance);
            @PointerTouch.started += instance.OnPointerTouch;
            @PointerTouch.performed += instance.OnPointerTouch;
            @PointerTouch.canceled += instance.OnPointerTouch;
            @PointerMouse.started += instance.OnPointerMouse;
            @PointerMouse.performed += instance.OnPointerMouse;
            @PointerMouse.canceled += instance.OnPointerMouse;
        }

        private void UnregisterCallbacks(IPositionsActions instance)
        {
            @PointerTouch.started -= instance.OnPointerTouch;
            @PointerTouch.performed -= instance.OnPointerTouch;
            @PointerTouch.canceled -= instance.OnPointerTouch;
            @PointerMouse.started -= instance.OnPointerMouse;
            @PointerMouse.performed -= instance.OnPointerMouse;
            @PointerMouse.canceled -= instance.OnPointerMouse;
        }

        public void RemoveCallbacks(IPositionsActions instance)
        {
            if (m_Wrapper.m_PositionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPositionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PositionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PositionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PositionsActions @Positions => new PositionsActions(this);

    // Buttons
    private readonly InputActionMap m_Buttons;
    private List<IButtonsActions> m_ButtonsActionsCallbackInterfaces = new List<IButtonsActions>();
    private readonly InputAction m_Buttons_Drag;
    public struct ButtonsActions
    {
        private @InputActions m_Wrapper;
        public ButtonsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_Buttons_Drag;
        public InputActionMap Get() { return m_Wrapper.m_Buttons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonsActions set) { return set.Get(); }
        public void AddCallbacks(IButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_ButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ButtonsActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
        }

        private void UnregisterCallbacks(IButtonsActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
        }

        public void RemoveCallbacks(IButtonsActions instance)
        {
            if (m_Wrapper.m_ButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_ButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ButtonsActions @Buttons => new ButtonsActions(this);
    public interface ITouchsActions
    {
        void OnPrimary(InputAction.CallbackContext context);
        void OnZero(InputAction.CallbackContext context);
    }
    public interface IPositionsActions
    {
        void OnPointerTouch(InputAction.CallbackContext context);
        void OnPointerMouse(InputAction.CallbackContext context);
    }
    public interface IButtonsActions
    {
        void OnDrag(InputAction.CallbackContext context);
    }
}
